Sistema computacional autónomo inteligente

Eng. Software Intro 2

Métricas -> Complexidade
Principios
Padrões

Complexidade
	Redução
		Eliminar complexidade desorganizada
	Controlo
		Gerir complexidade organizada

Arq. de Software é um meio que temos pra desenvolver software ... sem desenvolvermos código

trabalhar o conhecimento

Métricas - quantificar as metas
Principios - refletem conhecimentos base que nos guiam para boas soluções
Padrões - conhecimento sistematizado para resolver problemas correntes

Métricas

Acopolamento
	Até que ponto as partes estão muito ou pouco ligadas

	Grau interdependência entre partes (e.g. carro é um conjunto de peças)
	Parte de software são partes lógicas
	Tem uma natureza interacopolar(?)
	Visibilidade das classes 
	Relações entre classes e niveis de acopolamento (dependência(0), associação(1), agregação(2), composição(3), herança(4))
	quanto menor o acopolamento melhor (mais fácil de evoluir e desenvolver)
	direcional, bi-direcional(conta 2x)
	
	
Coesão
	Caráter organizado, desorganizado ou caótico

	Forma como se organiza os módulos(e.g. revistas em caixas ou em parteleiras organizadas)
	Organizar por semelhança de conteúdo
	
Simplicidade
	Fácil ou difícil

Abstração 	-> 	- acopolamento	-> gestão de complexidade
Modularização		+ coesão
Fatorização
	
Abstração
	

Modularização
	Aborda diretamente a complexidade, dividir para conquistar	

	Decomposição
		(e.g. 10 partes com ifs e elses => 1024 combinações)
		dividir em 2 módulos cada um com 5 partes, cada um tem 32 combinações => 64 combinações
	
		Fatorização
			Reduzir a redundância por fatorização (e.g. ax + bx = (a + b)x)
			Anomalias surgem devido a redundância
			2 mecanismos para eliminar redundância:
				Herança
					Fatorização estrutural
					Alto acopolamento
					B é A
					
				Delegação
					Fatorização funcional
					Baixo acopolamento
					B utiliza A
					Acopolamento pode variar dinamicamente

	Encapsulamento
		fechar o interior do módulo
		
Processo de Desenvolvimento de Software
	(processo iterativo => arquitetura -> modelo -> implementação -> arquitetura)
	Arquitetura é a aquisição de conhecimento
	Modelo é abordar o problema no nivel abstrato (receber conhecimento necessário)
	Implementação
		Estrutural
			Sem erros sintáticos, desenvolver código estrutural
		Comportamental
			Só após ter a estrutura fazer código comportamental

			O comportamento é como as partes se comportam ao longo do tempo

	